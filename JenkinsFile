pipeline {
    agent {
        label 'jenkins-agent'
    }
    tools {
        nodejs 'node'
    }
    environment {
        APP_NAME = "My-Portfolio"
        RELEASE = "1.0.0"
        DOCKER_USER = "13646891"
        DOCKER_PASS = "dockerhub"
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']], // Replace 'master' with your desired branch
                    userRemoteConfigs: [[url: 'https://github.com/hamzasdiri/My-Portfolio']]
                ])
            }
        }

        stage('Install Dependencies') {
            steps {
                bat 'npm install --force' // Install project dependencies
            }
        }
        
        stage('Build') {
            steps {
                bat 'npm run build' // Build your React app
            }
        }
        
        stage('Test') {
            steps {
                echo "Executing tests" // Run your tests
            }
        }

        stage('Sonarqube analysis') {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'jenkins-sonarqube-token') {
                        bat "sonar-scanner" // Run SonarQube scanner for JavaScript/TypeScript projects
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false,credentialsId: 'jenkins-sonarqube-token'
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('',DOCKER_PASS) {
                    docker_image = docker.build "${IMAGE_NAME}"
                    }
                    docker.withRegistry('',DOCKER_PASS) {
                    docker_image.push("${IMAGE_TAG}")
                    docker_image.push("latest")
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo "I will deploy it" // Deploy your app to the desired environment
            }
        }
    }
}
